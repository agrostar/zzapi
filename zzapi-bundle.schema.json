{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Schema for zzAPI bundle (collection of HTTP requests for doc/testing) used by the zzAPI toolset and VS Code extension.",
  "$defs": {
    "headerArray": {
      "type": "object",
      "required": ["name", "value"],
      "additionalProperties": false,
      "description": "A header is a map consisting of the keys name, value and doc*",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the header"
        },
        "value": { "type": "string", "description": "Value of the header" },
        "doc": {
          "type": "string",
          "description": "Documentation, typically in Markdown"
        }
      }
    },
    "paramArray": {
      "type": "object",
      "required": ["name"],
      "additionalProperties": false,
      "description": "A param is a map consisting of the keys name, value, and doc*",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the parameter."
        },
        "value": { "$ref": "#/$defs/scalar", "description": "Value of the parameter" },
        "raw": {
          "type": "boolean",
          "description": "Whether to treat the value as raw, ie, skip URL-encoding it (names will never be encoded), the default is false"
        },
        "doc": {
          "type": "string",
          "description": "Documentation, typically in Markdown"
        }
      }
    },
    "paramObject": {
      "type": "object",
      "description": "A set of parameters described as key/value pairs. Value can be an array of scalars",
      "properties": {
        "": {
          "anyOf": [
            { "$ref": "#/$defs/scalar"  },
            {
              "type": "array",
              "items": { "$ref": "#/$defs/scalar" }
            }
          ]
        }
      }
    },
    "headerObject": {
      "type": "object",
      "description": "A set ofheaders described as key/value pairs",
      "properties": {
        "": { "$ref": "#/$defs/scalar" }
      }
    },
    "options": {
      "description": "Options applicable to requests { follow, verifySSL, keepRawJSON, showHeaders }",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "follow": {
          "description": "If set, will automatically follow redirects (default: false)",
          "type": "boolean"
        },
        "showHeaders": {
          "description": "Show the headers along with status etc (like -v in curl)",
          "type": "boolean"
        },
        "keepRawJSON": {
          "description": "If the response is JSON, format the response before displaying",
          "type": "boolean"
        },
        "verifySSL": {
          "description": "If set, will verify the SSL certificate (default: false)",
          "type": "boolean"
        }
      }
    },
    "scalar": { "not": { "type": ["object", "array"] } },
    "assertion": {
      "description": "An assertion: the value should be equal to the simple value, or match the operator/value as an object",
      "anyOf": [
        { "$ref": "#/$defs/scalar" },
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "$eq": { "description": "Equals" },
            "$ne": { "$ref": "#/$defs/scalar" },
            "$lt": { "$ref": "#/$defs/scalar" },
            "$gt": { "$ref": "#/$defs/scalar" },
            "$lte": { "$ref": "#/$defs/scalar" },
            "$gte": { "$ref": "#/$defs/scalar" },
            "$type": {
              "type": "string",
              "enum": ["number", "string", "boolean", "object", "array", "null", "undefined"]
            },
            "$regex": { "type": "string" },
            "$options": { "type": "string" },
            "$exists": { "type": "boolean" },
            "$size": { "type": "integer" }
          }
        }
      ]
    },
    "tests": {
      "description": "A list of tests to run against the response",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "status": {
          "description": "An assertion against the HTTP status code in the response. The value can be a number (eg, 200), or an object with keys as operators and values as values",
          "$ref": "#/$defs/assertion"
        },
        "body": {
          "description": "An assertion against the entire response body",
          "$ref": "#/$defs/assertion"
        },
        "json": {
          "description": "DEPRECATED. A map of assertions against the response, parsed as JSON. The keys are paths into the nested JSON object",
          "deprecated": true,
          "type": "object",
          "patternProperties": {
            "": { "$ref": "#/$defs/assertion" }
          }
        },
        "headers": {
          "description": "DEPRECATED. A map of assertions against HTTP headers. They keys are names of the headers",
          "deprecated": true,
          "type": "object",
          "patternProperties": {
            "": { "$ref": "#/$defs/assertion" }
          }
        }
      },
      "patternProperties": {
        "^\\$\\.": {
          "description": "An assertion against an element in the response body parsed as JSON. The key is the jsonpath specification to identify the element",
          "$ref": "#/$defs/assertion"
        },
        "^\\$h.": {
          "description": "An assertion against an element in the response body parsed as JSON. The key is the jsonpath specification to identify the element",
          "$ref": "#/$defs/assertion"
        }
      }
    }
  },
  "type": "object",
  "required": ["requests"],
  "additionalProperties": false,
  "properties": {
    "variables": {
      "patternProperties": {
        "": {
          "description": "Name of the environment to which this set of variables is applicable",
          "type": "object",
          "patternProperties": {
            "^[_a-zA-Z][_a-zA-Z0-9]*": {
              "description": "Variable names can only contain _a-zA-Z0-9, and cannot start with a digit"
            }
          }
        }
      }
    },
    "common": {
      "description": "Some properties that are applied to all requests.",
      "type": "object",
      "properties": {
        "baseUrl": {
          "type": "string",
          "description": "baseUrl, if defined, will be prepended to all request URLs"
        },
        "headers": {
          "description": "HTTP Headers to be sent as part of any request in this bundle",
          "anyOf":[
            {
              "type": "array",
              "items": { "$ref": "#/$defs/headerArray" }
            },
            { "$ref": "#/$defs/headerObject" }
          ]
        },
        "options": { "$ref": "#/$defs/options" },
        "tests": { "$ref": "#/$defs/tests" }
      }
    },
    "requests": {
      "type": "object",
      "description": "Each request defines an HTTP request",
      "patternProperties": {
        "": {
          "type": "object",
          "required": ["url", "method"],
          "additionalProperties": false,
          "properties": {
            "url": { "type": "string" },
            "method": {
              "type": "string",
              "enum": ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "HEAD"]
            },
            "headers": {
              "description": "HTTP Headers to be sent as part of the request. This is in addition to any header defined in common. Headers can be overridden.",
              "anyOf":[
                {
                  "type": "array",
                  "items": { "$ref": "#/$defs/headerArray" }
                },
                { "$ref": "#/$defs/headerObject" }
              ]
            },
            "params": {
              "description": "Query string parameters",
              "anyOf": [
                {
                  "type": "array",
                  "items": { "$ref": "#/$defs/paramArray" }
                },
                { "$ref": "#/$defs/paramObject" }
              ]
            },
            "body": {
              "description": "The request body",
              "type": ["string", "object", "array"] 
            },
            "options": { "$ref": "#/$defs/options" },
            "tests": { "$ref": "#/$defs/tests" },
            "capture": {
              "type": "object",
              "deprecated": true,
              "description": "DEPRECATED: Variables to capture, the key is the name of the variable and the value is what to capture.",
              "properties": {
                "json": {
                  "type": "object",
                  "patternProperties": {
                    "": { "type": "string" }
                  }
                },
                "headers": {
                  "type": "object",
                  "patternProperties": {
                    "": { "type": "string" }
                  }
                }
              }
            },
            "setvars": {
              "type": "object",
              "patternProperties": {
                "^[_a-zA-Z][_a-zA-Z0-9]*": {
                  "description": "Variables to capture, the key is the name of the variable and the value is what to capture (status, body, $.jsonpath or $h.header",
                  "anyOf": [
                    { "type": "string", "pattern": "^\\$.*" },
                    { "type": "string", "enum": ["status", "body"] }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "patternProperties": {
            "^doc": {
              "type": "string",
              "description": "Documentation about the request, typically in Markdown. Different sections can be used, for example, doc-Response and doc-Purpose"
            },
            "^response": {
              "description": "A sample response. Using file:// prefix allows you to open the file within vscode."
            }
          }
        }
      }
    }
  }
}
